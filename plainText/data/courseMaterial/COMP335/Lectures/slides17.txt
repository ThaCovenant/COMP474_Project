



















Languages and Finite Automata


COMP 335
*
Linear Bounded Automata LBAs
and the Halting Problem 
 

COMP 335


COMP 335
*
Linear Bounded Automata (LBAs)
are the same as Turing Machines
with the following difference:
The space on the tape for the input 
string is the only space allowed to use

COMP 335


COMP 335
*
Left-end
marker
Input string
Right-end
marker
Working space
 in tape

All computation is done between end markers
Linear Bounded Automaton (LBA)

COMP 335









COMP 335
*
We define LBA’s as NonDeterministic
Open Problem:
NonDeterministic LBA’s
have same power as
Deterministic LBA’s ?

COMP 335


COMP 335
*
Example languages accepted by LBAs:
	LBA’s have more power than NPDA’s

	LBA’s have less power than TM’s 


COMP 335




COMP 335
*
The Chomsky Hierarchy
 

COMP 335


COMP 335
*
Unrestricted Grammars:
Productions
String of variables
and terminals
String of variables
and terminals

COMP 335



COMP 335
*
Example: unrestricted grammar:

COMP 335




COMP 335
*
A language      is recursively enumerable
if and only if     is generated by an
unrestricted grammar
Theorem:

COMP 335




COMP 335
*
Context-Sensitive Grammars:
where
Productions
String of variables
and terminals
String of variables
and terminals

COMP 335




COMP 335
*
The language 
is context-sensitive:

COMP 335




COMP 335
*
A language      is context sensitive iff
is  accepted by a Linear-Bounded automaton
Theorem:
There are languages which are 
context-sensitive but not context-free.
Observation:

COMP 335




COMP 335
*



Non-recursively enumerable
Recursively-enumerable
Recursive
Context-sensitive

Context-free
Regular

The Chomsky Hierarchy

COMP 335


COMP 335
*
Decidability
 

COMP 335


COMP 335
*
Consider decisions problems, that is
problems  with answer YES or NO 
Examples:
	 Does automaton      have 3 states ?

	 Is string       a binary number? 

	 Does DFA         accept any input?  


COMP 335






COMP 335
*
A problem is decidable if some Turing machine
decides (solves) the problem
Decidable problems:
	 Does automaton      have 3 states ?

	 Is string       a binary number? 

	 Does DFA         accept any input?  


COMP 335






COMP 335
*

Turing Machine
Input
problem
instance
YES
NO
A Turing machine that decides (solves) 
a problem answers YES or NO 
for each input of the problem

COMP 335


COMP 335
*
The machine that decides (solves) a problem:
	 If the answer is YES 

   then halts in a yes state 
	 If the answer is NO 

   then halts in a no state 
These yes/no states may not be final states

COMP 335


COMP 335
*













YES states
NO states
Turing Machine that decides a problem
YES and NO states are halting states



COMP 335


COMP 335
*
Difference between 
Recursive Languages and Decidable problems
The YES states may not be final states
For decidable problems:

COMP 335


COMP 335
*
Some problems are undecidable:
which means:
there is no Turing Machine that
solves all instances of the problem
A simple undecidable problem:
The membership problem

COMP 335


COMP 335
*
The Membership Problem
Input:
	Turing Machine

	String 

Question:
Does          accept      ? 

COMP 335







COMP 335
*
Theorem:
The membership problem is undecidable
Proof:
Assume for contradiction that
the membership problem is decidable
(there are         and      for which we cannot
decide whether                      )

COMP 335





COMP 335
*
Thus, there exists a Turing Machine
that solves the membership problem

YES
accepts
NO

rejects


COMP 335










COMP 335
*
Let        be a recursively enumerable language 
Let        be the Turing Machine that accepts
We will prove that        is also recursive: 
we will describe a Turing machine that
accepts      and halts on any input

COMP 335







COMP 335
*

accepts     ?
NO
YES
accept
Turing Machine that accepts
and halts on any input

reject

COMP 335










COMP 335
*
Therefore,
is recursive
But there are recursively enumerable
languages which are not recursive
Contradiction!!!!
Since       is chosen arbitrarily, every recursively enumerable language is also recursive 

COMP 335




COMP 335
*
Therefore, the membership problem
 is undecidable
END OF PROOF

COMP 335


COMP 335
*
Another famous undecidable problem:
The halting problem

COMP 335


COMP 335
*
The Halting Problem
Input:
	Turing Machine

	String 

Question:
Does          halt on input      ? 

COMP 335






COMP 335
*
Theorem:
The halting problem is undecidable
Proof:
Assume for contradiction that
the halting problem is decidable
(there are         and      for which we cannot
decide whether        halts on input        )

COMP 335






COMP 335
*
Thus, there exists Turing Machine
that solves the halting problem

YES
halts on
doesn’t 
halt on
NO



COMP 335










COMP 335
*




Input:
initial tape contents
Encoding
of
String
YES
NO
Construction of

COMP 335










COMP 335
*
Construct machine         :
If         returns YES then loop forever 
If         returns NO then halt

COMP 335






COMP 335
*




NO



Loop forever
YES

COMP 335










COMP 335
*
Construct machine       :
Input:   
If  
halts on input 
Then loop forever
Else halt
(machine       )

COMP 335







COMP 335
*



copy

COMP 335







COMP 335
*
Run machine        with input itself:
Input:   
If  
halts on input 
Then loop forever
Else halt
(machine       )

COMP 335







COMP 335
*
on input 
If        halts then loops forever
If       doesn’t halt then it halts
:
NONSENSE !!!!!

COMP 335






COMP 335
*
Therefore, we have contradiction
The halting problem is undecidable
END OF PROOF

COMP 335


COMP 335
*
Another proof of the same theorem:
If the halting problem was decidable then
every recursively enumerable language
would be recursive

COMP 335


COMP 335
*
Theorem:
The halting problem is undecidable
Proof:
Assume for contradiction that
the halting problem is decidable

COMP 335


COMP 335
*
There exists Turing Machine
that solves the halting problem

YES
halts on
doesn’t 
halt on
NO



COMP 335










COMP 335
*
Let        be a recursively enumerable language 
Let        be the Turing Machine that accepts
We will prove that        is also recursive: 
we will describe a Turing machine that
accepts      and halts on any input

COMP 335







COMP 335
*


 halts on     ?
YES
NO
Run      
with input
reject
accept
reject
Turing Machine that accepts
and halts on any input
Halts on final state
Halts on non-final 
state


COMP 335













COMP 335
*
Therefore
is recursive
But there are recursively enumerable
languages which are not recursive
Contradiction!!!!
Since       is chosen arbitrarily, every 
recursively enumerable language 
is also recursive 

COMP 335




COMP 335
*
Therefore, the halting problem is undecidable
END OF PROOF

COMP 335











[









]









a









b









c









d









e









}
{
n
n
n
c
b
a
L
=









}
{
!
n
a
L
=









v
u
®









d
Ac
cA
aB
aBc
S
®
®
®









L









L









|
|
|
|
v
u
£









}
{
n
n
n
c
b
a









aaA
aa
aB
Bb
bB
Bbcc
Ac
bA
Ab
aAbc
abc
S
|
|
®
®
®
®
®









M









w









M









w









?
)
(
M
L
w
Î









)
(
M
L
w
Î









H









M









w









L









M









L









L









M









w









H









L









L









w
w
M









0
q









y
q









n
q









H
¢









H









w
w
M









a
q









b
q









H
ˆ









M
w









M
M
w
w









H
ˆ









H
ˆ









H
w
ˆ









H
ˆ









H
ˆ









H
ˆ









M
