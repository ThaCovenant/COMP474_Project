



















Languages and Finite Automata


COMP 335
*
- Closure Properties of Regular Languages 

- Regular Expressions
*

COMP 335


COMP 335
*
NFA with Single Final State

COMP 335


COMP 335
*


Given any NFA, we can always convert
it into an equivalent NFA which has only
ONE final state (how?)

COMP 335


COMP 335
*






NFA
Equivalent NFA






Example

COMP 335












COMP 335
*
NFA
In General








Equivalent NFA


Single
final state






COMP 335





COMP 335
*
Extreme Case






NFA without final state


Add a final state
Without transitions

COMP 335


COMP 335
*
Properties of 
Regular Languages
 

COMP 335


COMP 335
*
Star:
For regular languages       and       
we will prove that:
Complement:
Intersection:
Reversal:
Concatenation:
Union:

Are regular
Languages

COMP 335








COMP 335
*
We say: Regular languages are closed under
Star:
Complement:
Intersection:
Reversal:
Concatenation:
Union:

COMP 335






COMP 335
*
Regular language






Single final state
NFA






Single final state
Regular language
NFA

COMP 335


COMP 335
*
Example













COMP 335






COMP 335
*
Union
NFA for 

















COMP 335





COMP 335
*
Example
 









NFA for









COMP 335









COMP 335
*
Concatenation

NFA for 













COMP 335





COMP 335
*
Example
 
NFA for














COMP 335









COMP 335
*
Star Operation
NFA for 








COMP 335









COMP 335
*
Example

NFA for








COMP 335











COMP 335
*
Reverse




NFA for




1. Reverse all transitions
2. Make initial state final state 
    and vice versa

COMP 335






COMP 335
*
Example









COMP 335










COMP 335
*
Complement
1. Take a DFA M1 that accepts 







2. Make final states in M1 non-final, 
    and vice-versa; this yields a desired DFA 
   for the complement of


COMP 335








COMP 335
*
Example












COMP 335














COMP 335
*
Intersection
DeMorgan’s Law:



regular



regular




regular

regular
regular

COMP 335



COMP 335
*
Example
regular
regular

regular


COMP 335





COMP 335
*
Regular Expressions
and their relationships to

 Regular Languages
 

COMP 335


COMP 335
*

1. Will show that every regular expression represents/denotes a regular language

2. Will show, given any regular language L,  how to find a regular expression for L



COMP 335


COMP 335
*
Regular Expressions
Regular expressions 
describe regular languages  


Example:

                 describes the language


COMP 335




COMP 335
*
Recursive Definition
Primitive regular expressions:

Are regular expressions
Given regular expressions       and 

COMP 335




COMP 335
*
Examples
is a regular expression.
is  NOT a regular expression!

COMP 335



COMP 335
*
Languages of Regular Expressions
         
 When r is a regular expression, we use L(r) 
 to express the language denoted by  r.

For example, if r=(a+bc)*, then


 

COMP 335



COMP 335
*
Definition for regular expression

Base case: primitive regular expressions :

COMP 335



COMP 335
*
Definition (continued)

Inductive case: if    and     are regular expressions, then the following are regular expressions as well:
  

COMP 335








COMP 335
*
Example 1
Regular expression:  

COMP 335










COMP 335
*
Example 2

Regular expression 

COMP 335




COMP 335
*
Example 3

Regular expression




or

COMP 335





COMP 335
*
Example 4

Regular expression
= {Binary strings with at least
      two consecutive 0’s} 

COMP 335



COMP 335
*
Example 5

Regular expression
= { all strings without
      two consecutive 0’s } 

COMP 335



COMP 335
*
Equivalent Regular Expressions

Definition:

    We say that regular expressions       
    and      are equivalent  (r1 ≡ r2) 
     if   

COMP 335





COMP 335
*
Example
 
={all strings without two consecutive 0’s} 

and
are equivalent
Reg. expressions

COMP 335






COMP 335
*
Regular Expressions
and
Regular Languages
 

COMP 335


COMP 335
*
Theorem

Languages
Generated by
Regular Expressions



Regular
Languages

COMP 335



COMP 335
*
Theorem - Part 1

Languages
Generated by
Regular Expressions



Regular
Languages
1.  For any regular expression
     the language           is regular

COMP 335



COMP 335
*
Theorem - Part 2

Languages
Generated by
Regular Expressions



Regular
Languages
2.  For any regular language     , there is
      a regular expression       with

COMP 335



COMP 335
*
Proof - Part 1
1.  For any regular expression
     the language           is regular
Proof by induction on the size of

COMP 335


COMP 335
*
Induction Basis
Primitive Regular Expressions:



NFAs











regular
languages

COMP 335




COMP 335
*
Inductive Hypothesis

Assume for regular expressions      and
that           and           are regular languages

   

COMP 335






COMP 335
*
Inductive Step
We will prove:

are regular 
Languages.

COMP 335



COMP 335
*
By definition of regular expressions:

COMP 335



COMP 335
*
By inductive hypothesis we know that:
           and             are regular languages
Regular languages are closed under:
Union 
Concatenation 
Star 
We also know that:

COMP 335




COMP 335
*

 Therefore: 

are regular
languages

COMP 335



COMP 335
*

And trivially, for any regular expression r1

               

L((r1)) is a regular language.

COMP 335


COMP 335
*
Proof – Part 2
2.  For any regular language      there is
      a regular expression      with
Proof by construction of a regular expression

COMP 335





COMP 335
*

Since       is regular, take any 
NFA       that accepts it
 




Single final state

COMP 335





COMP 335
*

From     , construct an equivalent
Generalized Transition Graph in which
transition labels are regular expressions 
Example:










COMP 335










COMP 335
*

Another Example:










COMP 335


















COMP 335
*

Reducing the states:









COMP 335















COMP 335
*

Resulting Regular Expression:




COMP 335









COMP 335
*
In General
Removing states:







COMP 335
















COMP 335
*
The final transition graph:



This graph corresponds to the reg. exp.:

COMP 335









UNKNOWN-0.unknown

UNKNOWN-1.unknown

UNKNOWN-2.unknown

UNKNOWN-3.unknown

UNKNOWN-4.unknown

UNKNOWN-5.unknown

UNKNOWN-6.unknown

UNKNOWN-7.unknown

UNKNOWN-8.unknown

UNKNOWN-9.unknown

UNKNOWN-10.unknown

UNKNOWN-11.unknown

UNKNOWN-12.unknown

UNKNOWN-13.unknown

UNKNOWN-14.unknown

UNKNOWN-15.unknown

UNKNOWN-16.unknown

UNKNOWN-17.unknown

UNKNOWN-18.unknown

UNKNOWN-19.unknown

UNKNOWN-20.unknown

UNKNOWN-21.unknown

UNKNOWN-22.unknown

UNKNOWN-23.unknown

UNKNOWN-24.unknown

UNKNOWN-25.unknown

UNKNOWN-26.unknown

UNKNOWN-27.unknown

UNKNOWN-28.unknown

UNKNOWN-29.unknown

UNKNOWN-30.unknown

UNKNOWN-31.unknown

UNKNOWN-32.unknown

UNKNOWN-33.unknown

UNKNOWN-34.unknown

UNKNOWN-35.unknown

UNKNOWN-36.unknown

UNKNOWN-37.unknown

UNKNOWN-38.unknown

UNKNOWN-39.unknown

UNKNOWN-40.unknown

UNKNOWN-41.unknown

UNKNOWN-42.unknown

UNKNOWN-43.unknown

UNKNOWN-44.unknown

UNKNOWN-45.unknown

UNKNOWN-46.unknown

UNKNOWN-47.unknown

UNKNOWN-48.unknown

UNKNOWN-49.unknown











a









b









l









1
L









2
L









*
1
L









1
L









2
1
L
L
Ç









R
L
1









2
1
L
L
È









2
1
L
L









2
M









2
L









(
)
2
2
L
M
L
=









(
)
1
1
L
M
L
=









1
M









1
L









}
0
:
{
1
³
=
n
b
a
L
n









1
M









{
}
ba
L
=
2









2
M









2
1
L
L
È









}
0
:
{
1
³
=
n
b
a
L
n









}
{
2
ba
L
=









}
{
}
0
:
{
2
1
ba
n
b
a
L
L
n
È
³
=
È









1
M









2
M









1
M









}
0
:
{
}
}{
0
:
{
2
1
³
=
³
=
n
bba
a
ba
n
b
a
L
L
n
n









2
M









*
1
L









*
1
L
Î
l









*
}
0
:
{
*
1
³
=
n
b
a
L
n









1
2
1
L
w
w
w
w
w
i
k
Î
=
L









R
L
1









¢
1
M









1
L









}
0
:
{
1
³
=
n
b
a
L
n









}
0
:
{
1
³
=
n
ba
L
n
R









¢
1
M









}
0
:
{
1
³
=
n
b
a
L
n









b
a
,









}
{
*
}
,
{
1
b
a
b
a
L
n
-
=









2
1
2
1
L
L
L
L
È
=
Ç









2
1
,
L
L









2
1
L
L
Ç









2
1
L
L
È









2
1
,
L
L









}
0
:
{
1
³
=
n
b
a
L
n









}
,
{
2
ba
ab
L
=









}
{
2
1
ab
L
L
=
Ç









*
)
(
bc
a
+









{
}
{
}
,...
,
,
,
,
,
,
*
bca
abc
aa
bc
a
bc
a
l
=









a
l
,
,
Æ









(
)
1
1
2
1
2
1
*
r
r
r
r
r
r
+









2
r









1
r









(
)
)
(
*
Æ
+
+
c
bc
a









(
)
+
+
b
a









(
)
{
}
,...
,
,
,
,
,
)
(
*
bca
abc
aa
bc
a
bc
a
L
l
=
+









(
)
(
)
{
}
(
)
{
}
a
a
L
L
L
=
=
Æ
=
Æ
l
l









(
)
(
)
(
)
2
1
2
1
r
L
r
L
r
r
L
È
=
+









(
)
(
)
(
)
2
1
2
1
r
L
r
L
r
r
L
=









(
)
(
)
(
)
*
1
*
1
r
L
r
L
=









(
)
(
)
(
)
1
1
r
L
r
L
=









(
)
*
a
b
a
+









(
)
(
)
*
a
b
a
L
+









(
)
(
)
(
)
*
a
L
b
a
L
+
=









(
)
(
)
*
a
L
b
a
L
+
=









(
)
(
)
(
)
(
)
(
)
*
a
L
b
L
a
L
È
=









{
}
{
}
(
)
{
}
(
)
*
a
b
a
È
=









{
}
{
}
,...
,
,
,
,
aaa
aa
a
b
a
l
=









{
}
,...
,
,
,...,
,
,
baa
ba
b
aaa
aa
a
=









(
)
(
)
bb
a
b
a
r
+
+
=
*









(
)
{
}
,...
,
,
,
,
,
bbb
ba
abb
aa
bb
a
r
L
=









(
)
(
)
b
bb
aa
r
*
*
=









(
)
}
0
,
:
{
2
2
³
=
m
n
b
b
a
r
L
m
n









(
)
}
0
,
:
{
1
2
2
³
=
+
m
n
b
a
r
L
m
n









*
*
)
1
0
(
00
)
1
0
(
+
+
=
r









)
(
r
L









)
0
(
)
01
1
(
*
l
+
+
=
r









)
(
r
L









1
r









2
r









)
(
)
(
2
1
r
L
r
L
=









L









)
0
(
)
01
1
(
*
1
l
+
+
=
r









)
0
(
1
)
0
(
)
011
1
(
*
*
*
*
2
l
l
+
+
+
=
r









L
r
L
r
L
=
=
)
(
)
(
2
1









1
r









2
r









=









Í









r









)
(
r
L









Ê









L









r









L
r
L
=
)
(









a
l
,
,
Æ









a









)
(
}
{
)
(
3
a
L
a
M
L
=
=









)
(
}
{
)
(
2
l
l
L
M
L
=
=









)
(
)
(
1
Æ
=
Æ
=
L
M
L









1
r









2
r









)
(
1
r
L









)
(
2
r
L









(
)
(
)
(
)
(
)
(
)
1
*
1
2
1
2
1
r
L
r
L
r
r
L
r
r
L
+









(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
1
1
*
1
*
1
2
1
2
1
2
1
2
1
)}
(
{
r
L
r
L
r
L
r
L
r
L
r
L
r
r
L
r
L
r
L
r
r
L
=
=
=
È
=
+









)
(
1
r
L









)
(
2
r
L









(
)
(
)
(
)
(
)
*
)}
(
{
1
2
1
2
1
r
L
r
L
r
L
r
L
r
L
È









(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
*
*
1
1
2
1
2
1
2
1
2
1
r
L
r
L
r
L
r
L
r
r
L
r
L
r
L
r
r
L
=
=
È
=
+









L









M









L
M
L
=
)
(









M









b
a
,









c









M









b
a
+









b









0
q









1
q









2
q









b
a
,









a
bb
*









)
(
*
b
a
bb
+









*
)
(
*
*
)
*
(
b
b
a
bb
a
bb
r
+
=









L
M
L
r
L
=
=
)
(
)
(









i
q









q









j
q









d









e









d
ae
*









b
ce
*









d
ce
*









b
ae
*









f
q









1
r









2
r









3
r









4
r









*
2
*
1
3
4
2
*
1
)
(
r
r
r
r
r
r
r
+
=









L
M
L
r
L
=
=
)
(
)
(
