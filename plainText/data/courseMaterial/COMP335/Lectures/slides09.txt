



















Languages and Finite Automata


COMP 335
*
Pushdown Automata
(PDAs)
 
*

COMP 335


COMP 335
*
Pushdown Automaton -- PDA









Input String
Stack
States

COMP 335


COMP 335
*
Initial Stack Symbol

Stack

Stack
bottom
special symbol
stack
head
top

COMP 335




COMP 335
*
The States


Input
symbol
Pop
symbol
Push
Symbol(s)

COMP 335





COMP 335
*




top
input
stack

Replace

top

COMP 335



















COMP 335
*




Push


top
input
stack
top

COMP 335




















COMP 335
*




Pop


top
input
stack

COMP 335


















COMP 335
*




No Change


top
input
stack

COMP 335



















COMP 335
*




Pop


top
input
stack
A Possible Transition
empty

COMP 335












COMP 335
*




Pop

top
input
stack
Another  Possible Transition


COMP 335













COMP 335
*



input
A “Bad” Transition (not allowed)
The automaton Halts in state 
and Rejects the input string

Empty stack
      
HALT, i.e, 
no more moves

COMP 335









COMP 335
*



input
Another Bad Transition
The automaton Halts in state 
and Rejects the input string

Empty stack
      
HALT

COMP 335









COMP 335
*


 no transition is allowed in the PDA when the stack is empty

Empty stack

COMP 335





COMP 335
*
Non-Determinism





These are all allowed transitions in a 
Non-deterministic PDA (NPDA)

COMP 335











COMP 335
*
NPDA:   Non-Deterministic PDA
Example:








COMP 335











COMP 335
*







Execution Example:

Input
current
state
Time 0

Stack

COMP 335


















COMP 335
*








Input
Time 1


Stack

COMP 335


















COMP 335
*









Input
Stack
Time 2


COMP 335



















COMP 335
*









Input
Stack
Time 3


COMP 335




















COMP 335
*









Input
Stack
Time 4


COMP 335





















COMP 335
*








Input

Stack
Time 5


COMP 335





















COMP 335
*








Input

Stack
Time 6


COMP 335




















COMP 335
*








Input

Stack
Time 7


COMP 335



















COMP 335
*








Input
Time 8
accept

Stack


COMP 335


















COMP 335
*
A string w is accepted by a PDA M
if there is a computation such that:
 all the input is consumed
                   AND
 M is a final state
At the end of the computation, the
content of the stack does not matter

COMP 335


COMP 335
*
Therefore, the string
is accepted by this NPDA








COMP 335












COMP 335
*








In general, the language accepted by the following NPDA is:

COMP 335












COMP 335
*
NPDA -- Another example






NPDA 

COMP 335











COMP 335
*

Execution Example:
Input
Time 0

Stack







COMP 335














COMP 335
*



Input
Time 1

Stack






COMP 335















COMP 335
*


Input
Time 2

Stack







COMP 335
















COMP 335
*


Input
Time 3

Stack






Guess the middle 
of string

COMP 335
















COMP 335
*


Input
Time 4

Stack







COMP 335
















COMP 335
*


Input
Time 5

Stack







COMP 335















COMP 335
*

Input
Time 6

Stack







accept

COMP 335














COMP 335
*

Rejection Example:
Input
Time 0

Stack







COMP 335














COMP 335
*


Input
Time 1

Stack







COMP 335















COMP 335
*


Input
Time 2

Stack







COMP 335
















COMP 335
*


Input
Time 3

Stack





Guess the middle 
of string


COMP 335
















COMP 335
*


Input
Time 4

Stack







COMP 335
















COMP 335
*

Input
Time 5

Stack






There is no possible transition.
Input is not consumed

COMP 335















COMP 335
*

Another computation on the same string:
Input
Time 0

Stack







COMP 335














COMP 335
*


Input
Time 1

Stack







COMP 335















COMP 335
*


Input
Time 2

Stack







COMP 335
















COMP 335
*
Input
Time 3

Stack









COMP 335

















COMP 335
*
Input
Time 4
Stack










COMP 335


















COMP 335
*
Input
Time 5
Stack









No final state 
is reached

COMP 335


















COMP 335
*






There is no computation 
that accepts string

COMP 335











COMP 335
*
A string is rejected if there is 
no computation such that:
 all the input is consumed
                   AND
 we reach a final state
At the end of the computation,
we do not care about the stack contents

COMP 335


COMP 335
*
In other words, a string w is rejected if
in every computation with w as the input:
all symbols in w cannot be consumed
 OR
the input w is consumed but the PDA is not in a final state
OR
the stack is empty in the middle of computation!

COMP 335


COMP 335
*
Pushing Strings


Input
symbol
Pop
symbol
Push
string


COMP 335





COMP 335
*




top
input
stack

Push


pushed
string
Example:

COMP 335





















COMP 335
*
Another NPDA example




NPDA 

COMP 335













COMP 335
*
Time 0

Input
current
state

Stack




Execution Example:

COMP 335


















COMP 335
*
Time 1

Input

Stack






COMP 335



















COMP 335
*
Time 3

Input

Stack






COMP 335




















COMP 335
*
Time 4

Input

Stack






COMP 335



















COMP 335
*

Time 5

Input

Stack





COMP 335




















COMP 335
*

Time 6

Input

Stack





COMP 335




















COMP 335
*

Time 7

Input

Stack





COMP 335



















COMP 335
*
Time 8

Input

Stack





accept

COMP 335


















COMP 335
*
Formalities for NPDAs
 

COMP 335


COMP 335
*


Transition function:
Transition diagram:

COMP 335






COMP 335
*



Transition function:
Transition diagram:

COMP 335








COMP 335
*
Formal Definition
Non-Deterministic Pushdown Automaton 
                          (NPDA, for short)
States
Input
alphabet
Stack
alphabet
Transition
function
Final
states
Stack
end
symbol
Initial
state

COMP 335



COMP 335
*

Instantaneous Description (ID)

Current
state of
the PDA
Remaining,
unread part of
the input string
Current
stack
contents

COMP 335



COMP 335
*









Input
Stack
Time 4:

Example:
Instantaneous Description (ID)

COMP 335






















COMP 335
*









Input
Stack
Time 5:

Example:
Instantaneous Description (ID)

COMP 335






















COMP 335
*
The processing by the NPDA from step 4 to 5 
can be expressed using ID’s as follows:
Time 4
Time 5

COMP 335



COMP 335
*







ID’s are used to express the computation 
of an NPDA on the input string. For example,

COMP 335












COMP 335
*
For convenience and as a shortcut, we write:

COMP 335




COMP 335
*
Formal Definition
The language              of the NPDA     :
Initial ID
Final ID

COMP 335





COMP 335
*
Example:









COMP 335













COMP 335
*







NPDA       :


COMP 335














COMP 335
*







Therefore:

for the NPDA        below:

COMP 335






















$









z









q
1









q
2









a
,
b
®
c









a









L









b









e









h









$









c









a
,
l
®
c









a
,
b
®
l









a
,
l
®
l









b









l
®
$
,
a









b
a
®
$
,









b









c
b
a
®
,









c
a
®
l
,









z
y
x
®
,









q
3









d
b
a
®
,









l
,
b
®
c









   
transition
-
l









c
b
a
®
,









l
,
l
®
l









a
,
l
®
a









b
,
a
®
l









q
0









l
,
$
®
$









0
q









aaabbb









}
0
:
{
³
=
n
b
a
L
n
n









b
b
a
a
®
®
l
l
,
,









l
l
®
®
b
b
a
a
,
,









M









}
{
)
(
R
ww
M
L
=









1
q









abbb









)
(
M
L
abbb
Ï
Þ









a
,
b
®
w









a
,
b
®
cdf









  
L









c









d









f









$
$
,
®
l









a
,
$
®
0
$









a
,
0
®
00









a
,
1
®
l









b
,
$
®
1
$









b
,
1
®
11









b
,
0
®
l









}
)
(
)
(
:
{
)
(
w
n
w
n
w
M
L
b
a
=
=









0









0









1









)}
,
{(
)
,
,
(
2
1
w
q
b
a
q
=
d









w
b
a
®
,









u
b
a
®
,









)}
,
(
),
,
{(
)
,
,
(
3
2
1
u
q
w
q
b
a
q
=
d









)
,
,
,
δ
,
Γ
,
Σ
,
(
0
F
z
q
Q
M
=









)
,
,
(
u
v
q









$)
,
,
(
1
aaa
bbb
q









l
®
a
b
,









a
a
®
l
,









$
$
,
®
l









$)
,
,
(
2
aa
bb
q









$)
,
,
(
$)
,
,
(
2
1
aa
bb
q
aaa
bbb
q
f









,$)
,
(
,$)
,
(
$)
,
,
(
$)
,
,
(
$)
,
,
(
$)
,
,
(
$)
,
,
(
,$)
,
(
,$)
,
(
3
2
2
2
1
1
1
1
0
l
l
q
q
a
b
q
aa
bb
q
aaa
bbb
q
aa
abbb
q
a
aabbb
q
aaabbb
q
aaabbb
q
f
f
f
f
f
f
f
f









,$)
,
(
,$)
,
(
$)
,
,
(
$)
,
,
(
$)
,
,
(
$)
,
,
(
$)
,
,
(
,$)
,
(
,$)
,
(
3
2
2
2
1
1
1
1
0
l
l
q
q
a
b
q
aa
bb
q
aaa
bbb
q
aa
abbb
q
a
aabbb
q
aaabbb
q
aaabbb
q
f
f
f
f
f
f
f
f









,$)
,
(
,$)
,
(
3
0
l
q
aaabbb
q
*
f









M









}
),
,
,
(
)
,
,
(
,
:
{
)
(
*
*
0
*
G
Î
S
Î
=
u
u
q
z
w
q
w
w
M
L
f
M
l
f









)
(
M
L









,$)
,
(
*
,$)
,
(
3
0
l
q
aaabbb
q
f









a
a
®
l
,









l
®
a
b
,









l
®
a
b
,









l
l
l
®
,









$
$
,
®
l









)
(
M
L
aaabbb
Î









,$)
,
(
*
,$)
,
(
3
0
l
q
b
a
q
n
n
f









M









)
(
M
L
b
a
n
n
Î









}
0
:
{
)
(
³
=
n
b
a
M
L
n
n
