



















Languages and Finite Automata


COMP 335
*
Standard Representations 
of Regular Languages
Regular Languages
DFAs
NFAs
Regular
Expressions
Regular
Grammars





*

COMP 335


COMP 335
*
When we say:
We are given 
a regular language      
it means that :
       is in a standard 
    representation

COMP 335




COMP 335
*
Elementary Questions

about

Regular Languages
 

COMP 335


COMP 335
*
Membership Question
Question:
Given any regular language
and any string     in the alphabet, 
how can we check if            ?  
Answer: 
Take a DFA that accepts
and check if       is accepted 

COMP 335





COMP 335
*




DFA




DFA

COMP 335






COMP 335
*
Given any regular language    , 
how can to check if         ? 
That is, is     empty?  
Take a DFA M that accepts      

Then check if there is any path 
from the initial state to a final state
Question:
Answer:

COMP 335






COMP 335
*




DFA




DFA

COMP 335




COMP 335
*
Given a regular language    , 
how can we check if it is finite?  
Take a DFA that accepts      

Then check if there is a walk with cycle
from the initial state to a final state
Question:
Answer:

COMP 335




COMP 335
*




DFA


is infinite




DFA


is finite



COMP 335




COMP 335
*
Given regular languages      and      ,
 how to decide if              ?  
Question:
Check if
Answer:

COMP 335





COMP 335
*

and






COMP 335



COMP 335
*

or






COMP 335



COMP 335
*
Non-regular languages
 

COMP 335


COMP 335
*

Regular languages
Non-regular languages

COMP 335








COMP 335
*
How to show that a language is not regular?
Can do this by proving there is no DFA for it 
Problem: this is not easy to prove. Why?
Solution: the Pumping Lemma !!!

COMP 335


COMP 335
*
 
The Pigeonhole Principle

COMP 335


COMP 335
*
 



pigeons
pigeonholes

COMP 335




COMP 335
*
 



A pigeonhole must contain 
at least two pigeons

COMP 335


COMP 335
*
 
...........



...........
pigeons (objects)
pigeonholes (boxes)

COMP 335





COMP 335
*
The Pigeonhole Principle
 



...........
Pigeons 
pigeonholes
There is a pigeonhole
 with at least 2 pigeons

COMP 335





COMP 335
*
The Pigeonhole Principle

and 

DFAs
 

COMP 335


COMP 335
*

 
DFA with       states 






COMP 335















COMP 335
*
 





In walks of strings:
no state
is repeated

COMP 335















COMP 335
*
 
In walks of strings:





a state
is repeated

COMP 335















COMP 335
*
 
To accept any string w by M with |w|>=4, 





the # of transitions in M (i.e., |w|) to follow is more than the # of states in M  Some states in M must repeat.

COMP 335














COMP 335
*
In general, given any DFA M, if a string w 
is accepted by M, if the length of  w >= 
# of states in M,   
then a state q is repeated in the walk of w.






......
......
walk of 
Repeated state

COMP 335




COMP 335
*
In other words, for a string     :
          
              transitions are pigeons

              states are pigeonholes








......
......
walk of 
Repeated state

COMP 335







COMP 335
*
The Pumping Lemma
 

COMP 335


COMP 335
*
Take an infinite regular language
There exists a DFA M that accepts 









states
M has

COMP 335





COMP 335
*
Take  string      in    
Then there is a walk with label    :





.........
walk

COMP 335






COMP 335
*
If the length |  | 
  (the number of states in M)
then, from the pigeonhole principle:
 a state is repeated in the walk






......
......

walk

COMP 335







COMP 335
*






......
......

walk
Let     be the first state repeated in the
walk of 

COMP 335






COMP 335
*
Then we can write:  






......
......





COMP 335







COMP 335
*






......
......




Observations:
(1) length
(2) length

COMP 335








COMP 335
*
The string         
is also accepted by M 
Observation:






......
......





COMP 335







COMP 335
*
The string         
is also accepted by M
Observation:






......
......





COMP 335







COMP 335
*
The string         
is also accepted by M 
Observation:






......
......





COMP 335







COMP 335
*
the strings        
are also accepted, 
In General:






......
......





COMP 335








COMP 335
*
In General:






......
......





COMP 335








COMP 335
*
In other words, we described:



The Pumping Lemma !!!

COMP 335


COMP 335
*
The Pumping Lemma:
	 Given an infinite regular language 

	 there exists an integer           

	 for any string              with length   

	 we can write

	 with                        and

	 such that:


COMP 335











COMP 335
*
Applications 

of

the Pumping Lemma
 

COMP 335


COMP 335
*
Theorem:
The language
is not regular.
Proof:
Use the Pumping Lemma

COMP 335



COMP 335
*
Assume that     is a regular language
Since    is an infinite language,
we can apply the Pumping Lemma 

COMP 335





COMP 335
*
Let        be the integer in the Pumping Lemma
Pick a string       such that: (1)  
and
We pick:
(2) length

COMP 335








COMP 335
*
it must be that length
From the Pumping Lemma 






Write:
Thus:

COMP 335











COMP 335
*
From the Pumping Lemma:
Thus:

COMP 335







COMP 335
*
From the Pumping Lemma: 






Thus:


COMP 335













COMP 335
*
But:
CONTRADICTION!!!


COMP 335






COMP 335
*
Our assumption that
is a regular language is not true
Conclusion:
is not a regular language
Therefore:

COMP 335




COMP 335
*

Regular languages
Non-regular languages

COMP 335



COMP 335
*
More Applications 

of

the Pumping Lemma

COMP 335


COMP 335
*

Regular languages
Non-regular languages

COMP 335



COMP 335
*
Theorem:
The language
is not regular
Proof:
Use the Pumping Lemma

COMP 335




COMP 335
*
Assume for contradiction
that       is a regular language
Since        is infinite
we can apply the Pumping Lemma 

COMP 335





COMP 335
*
 We pick
Let        be the integer in the Pumping Lemma
Pick a string       such that:  
length
and

COMP 335








COMP 335
*
Write
it must be that length
From the Pumping Lemma 







Thus:

COMP 335













COMP 335
*
From the Pumping Lemma:
Thus:

COMP 335







COMP 335
*
From the Pumping Lemma:








Thus:

COMP 335















COMP 335
*

BUT:
CONTRADICTION!!!

COMP 335






COMP 335
*
Our assumption that
is a regular language is not true
Conclusion:
is not a regular language
Therefore:

COMP 335




COMP 335
*

Regular languages
Non-regular languages

COMP 335



COMP 335
*
Theorem:
The language
is not regular
Proof:
Use the Pumping Lemma

COMP 335



COMP 335
*
Assume for contradiction
that       is a regular language
Since        is infinite
we can apply the Pumping Lemma 

COMP 335





COMP 335
*
We pick
Let        be the integer in the Pumping Lemma
Pick a string       such that:  
length
and

COMP 335








COMP 335
*
Write
it must be that length
From the Pumping Lemma 







Thus:

COMP 335












COMP 335
*
From the Pumping Lemma:
Thus:

COMP 335







COMP 335
*
From the Pumping Lemma: 





Thus:

COMP 335












COMP 335
*

BUT:
CONTRADICTION!!!

COMP 335






COMP 335
*
Our assumption that
is a regular language is not true
Conclusion:
is not a regular language
Therefore:

COMP 335




COMP 335
*

Regular languages
Non-regular languages

COMP 335



COMP 335
*
Theorem:
The language
is not regular
Proof:
Use the Pumping Lemma

COMP 335




COMP 335
*
Assume for contradiction
that       is a regular language
Since        is infinite
we can apply the Pumping Lemma 

COMP 335





COMP 335
*
We pick
Let        be the integer in the Pumping Lemma
Pick a string       such that:  
length

COMP 335








COMP 335
*
Write
it must be that length
From the Pumping Lemma 






Thus:

COMP 335











COMP 335
*
From the Pumping Lemma:
Thus:

COMP 335







COMP 335
*
From the Pumping Lemma: 





Thus:


COMP 335













COMP 335
*

Since:
There must exist      such that: 

COMP 335







COMP 335
*
However:
,    for


for any integer 

COMP 335









COMP 335
*

BUT:
CONTRADICTION!!!

COMP 335






COMP 335
*
Our assumption that
is a regular language is not true
Conclusion:
is not a regular language
Therefore:

COMP 335



UNKNOWN-0.unknown

UNKNOWN-1.unknown

UNKNOWN-2.unknown

UNKNOWN-3.unknown

UNKNOWN-4.unknown

UNKNOWN-5.unknown

UNKNOWN-6.unknown

UNKNOWN-7.unknown

UNKNOWN-8.unknown

UNKNOWN-9.unknown

UNKNOWN-10.unknown

UNKNOWN-11.unknown

UNKNOWN-12.unknown

UNKNOWN-13.unknown

UNKNOWN-14.unknown

UNKNOWN-15.unknown

UNKNOWN-16.unknown

UNKNOWN-17.unknown

UNKNOWN-18.unknown

UNKNOWN-19.unknown

UNKNOWN-20.unknown

UNKNOWN-21.unknown

UNKNOWN-22.unknown











L









L









L









L
w
Î









w









w









L
w
Î









L
w
Ï









w









Æ
=
L









Æ
¹
L









Æ
=
L









1
L









2
L









2
1
L
L
=









Æ
=
Ç
È
Ç
)
(
)
(
2
1
2
1
L
L
L
L









Æ
=
Ç
È
Ç
)
(
)
(
2
1
2
1
L
L
L
L









1
L









2
L









1
L









2
L









2
1
L
L
Í









1
2
L
L
Í









2
L









1
L









Æ
=
Ç
2
1
L
L









Æ
=
Ç
2
1
L
L









Æ
¹
Ç
È
Ç
)
(
)
(
2
1
2
1
L
L
L
L









2
1
L
L
¹









2
1
L
L
Ë









1
2
L
L
Ë









Æ
¹
Ç
2
1
L
L









Æ
¹
Ç
2
1
L
L









b
a
*









a
c
b
+
*









...
etc









*
)
(
b
a
c
b
+
+









}
0
:
{
³
n
b
a
n
n









}*}
,
{
:
{
b
a
v
vv
R
Î









4









3









n









m









m
n
>









n









m









m
n
>









4









1
q









2
q









3
q









a









b









4
q









a









aab
aa
a









...
abbbabbabb
abbabb
bbaa
aabb









q









w









q









a









L









L









m









L









w









w









m
³









w









q









z
y
x
w
=









x









y









z









x









y









z









m
y
x
£
|
|









1
|
|
³
y









z
x









z
y
y
x









z
y
y
y
x









z
y
x
wi
i
=









...
,
2
,
1
,
0
=
i









)
(
∈
M
L
z
y
x
w
i
i
=









L
w
Î









m
w
³
|
|









z
y
x
w
=









m
y
x
£
|
|









1
|
|
³
y









,
L
z
y
x
w
i
i
Î
=









...
,
2
,
1
,
0
=
i









}
0
:
{
³
=
n
b
a
L
n
n









L









w









m
w
³
|
|









m
m
b
a
w
=









m









1
|
|
,
|
|
³
£
y
m
y
x









b
ab
aa
aa
a
b
a
xyz
w
m
m
...
...
...
...
=
=
=









1
,
³
=
k
a
y
k









x









y









z









m









z
y
x
b
a
w
m
m
=
=









L
z
y
x
w
i
i
Î
=









m
m
b
a
z
y
x
w
=
=









L
z
y
x
w
Î
=
2
2









L
b
ab
aa
aa
aa
a
z
xy
Î
=
...
...
...
...
...
2









k
m
+









L
z
y
x
Î
2









m
m
b
a
z
y
x
=









L
b
a
m
k
m
Î
+









}
0
:
{
³
=
n
b
a
L
n
n









L
b
a
m
k
m
Ï
+









1
≥
k









L









*}
:
{
S
Î
=
v
vv
L
R









}
,
{
b
a
=
S









m
m
m
m
a
b
b
a
w
=









z
y
x
a
b
b
a
m
m
m
m
=









a
ba
bb
ab
a
aa
a
xyz
...
...
...
...
...
...
=









y









m









m









m









m









1
|
|
,
|
|
³
£
y
m
y
x









1
,
³
=
k
a
y
k









L
z
y
x
i
Î









L
z
y
x
Î
2









m
m
m
m
a
b
b
a
z
y
x
=









L
a
ba
bb
ab
a
aa
aa
a
z
xy
∈
...
...
...
...
...
...
...
=
2









k
m
+









L
a
b
b
a
m
m
m
k
m
Î
+









L
a
b
b
a
m
m
m
k
m
Ï
+









1
³
k









}
0
,
:
{
³
=
+
l
n
c
b
a
L
l
n
l
n









m
m
m
c
b
a
w
2
=









z
y
x
c
b
a
m
m
m
=
2









c
cc
bc
ab
aa
aa
a
xyz
...
...
...
...
...
...
=









m
2









m
m
m
c
b
a
z
y
x
2
=









L
xz
z
y
x
∈
=
0









1
,
³
=
k
a
y
k









L
c
cc
bc
ab
aa
a
xz
Î
=
...
...
...
...
...









k
m
-









L
xz
Î









L
c
b
a
m
m
k
m
Î
-
2









L
c
b
a
m
m
k
m
Ï
-
2









}
0
:
{
!
³
=
n
a
L
n









n
n
n
×
-
×
=
)
1
(
2
1
!
L









!
m
a
w
=









z
y
x
a
m
=
!









a
aa
aa
aa
aa
a
a
xyz
m
...
...
...
...
...
!
=
=









m
m
-
!









m
k
a
y
k
£
£
=
1
,









!
m
a
z
y
x
=









L
a
aa
aa
aa
aa
aa
a
z
xy
Î
=
...
...
...
...
...
...
2









k
m
+









L
a
k
m
Î
+
!









!
!
p
k
m
=
+









m
k
£
£
1









p









)!
1
(
!
)
1
(
!
!
!
!
!
+
=
+
=
+
<
+
£
+
£
m
m
m
m
m
m
m
m
m
m









k
m
+
!









1
>
m









)!
1
(
!
+
<
+
m
k
m









!
!
p
k
m
¹
+









L
a
k
m
Ï
+
!
